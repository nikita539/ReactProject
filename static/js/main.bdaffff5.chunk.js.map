{"version":3,"sources":["components/LogIn/log_in.module.css","components/register/register.module.css","components/password-recovery/password_recovery.module.css","components/navbar/navbar.module.css","components/Profile/Profile.module.css","components/new_password/new_password.module.css","components/404/404.module.css","components/navbar/Navbar.tsx","API/instance.ts","API/API.ts","store/profile-reducer.ts","components/Profile/Profile.tsx","components/LogIn/loginForm.tsx","store/loginError-reducer.ts","store/log_in-reducer.tsx","components/LogIn/log_in.tsx","store/register-reducer.tsx","components/register/registerForm.tsx","components/register/register.tsx","components/new_password/new_password.tsx","components/404/404.tsx","common/helpers/validations_rules.ts","components/password-recovery/password_recovery.tsx","common/customHooks/useForm.ts","API/packsAPI.ts","components/table/table.tsx","App.tsx","reportWebVitals.ts","store/store.ts","store/user-reducer.ts","index.tsx"],"names":["module","exports","routes","Navbar","className","classes","to","instance","axios","create","baseURL","withCredentials","Api","email","password","post","from","message","initialStateProfile","name","avatar","Profile","dispatch","useDispatch","profileData","useSelector","state","profileDate","useEffect","then","res","type","data","catch","error","src","alt","LogInFrom","props","style","width","height","emailError","id","aria-describedby","placeholder","value","onChange","emailChange","color","passwordError","passwordChange","textDecoration","onClick","logIn","initialState","errorLoginEmailAC","errorMessage","errorLoginPasswordAC","errorMessagePassword","LogInAC","verified","LogIn","loginDate","console","log","useState","setEmail","setPassword","Login","H1","event","currentTarget","test","length","LogInThunk","isRegistered","setError","ErrorAC","RegisterForm","register","Register","e","Password","confirmPassword","setConfirmPassword","Button","signUp","isRegisteredUser","RegisterTC","NewPassword","Four","fontSize","emailValidate","values","errors","PasswordRecovery","responseMessage","setResponseMessage","isDisable","setIsDisable","callback","validate","setValues","setErrors","isSubmitting","setIsSubmitting","Object","keys","handleChange","persist","target","handleSubmit","preventDefault","useForm","a","response","info","styles","password_recovery","onSubmit","noValidate","disabled","autoComplete","spinner","role","packsAPI","params","get","Table","massFromServer","setMassFromServer","cardPacks","massResult","map","i","cardsCount","user_name","rating","scope","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","user","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdaffff5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"log_in_Login__3a6jN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Register\":\"register_Register__1oefD\",\"Button\":\"register_Button__3o_Gt\",\"Password\":\"register_Password__1pEoQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"password_recovery\":\"password_recovery_password_recovery__1YL-i\",\"spinner\":\"password_recovery_spinner__2xgaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"navbar_Navbar__vHal0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__1icDB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewPassword\":\"new_password_NewPassword__IWeTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Four\":\"404_Four__1IPCT\"};","import React from \"react\";\r\nimport {NavLink,Redirect} from \"react-router-dom\";\r\nimport './navbar.module.css'\r\nimport classes from \"./navbar.module.css\"\r\n\r\n\r\nexport const routes = {\r\n    forProfile:\"/Profile\",\r\n    forLogin:\"/Log_in\",\r\n    forRegister:\"/Register\",\r\n    foNewPassword:\"/New_Password\",\r\n    forPasswordRecovery:\"/PasswordRecovery\",\r\n    forMistake:\"/404\",\r\n    forTable:\"/Table\"\r\n}\r\n\r\n\r\nconst Navbar = () => {\r\n    return <div className={classes.Navbar}>\r\n        <ul className=\"nav nav-tabs\">\r\n            <li className=\"nav-item\">\r\n                <NavLink to={routes.forProfile} className=\"nav-link\">Profile</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink to={routes.forLogin} className=\"nav-link\" >Log_in</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink to={routes.forRegister} className=\"nav-link\" >Register</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink to={routes.foNewPassword} className=\"nav-link\">New_Password</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink to={routes.forPasswordRecovery} className=\"nav-link\">Password recovery</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink to={routes.forTable} className=\"nav-link\">Table</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink to={routes.forMistake} className=\"nav-link\">404</NavLink>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nexport default Navbar;","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\",\r\n    withCredentials: true\r\n})","import {instance} from \"./instance\";\r\n\r\n\r\ntype pingType = {\r\n    backTime: number\r\n    frontTime: string\r\n    info: string\r\n    ping: number\r\n}\r\ntype LogInType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    update: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\ntype RegisterType = {\r\n    addedUser: {\r\n        created: Date\r\n        email: string\r\n        isAdmin: boolean\r\n        name: string\r\n        publicCardPacksCount: number\r\n        updated: Date\r\n        verified: boolean\r\n        __v: number\r\n        _id: string\r\n    }\r\n    error?: string\r\n}\r\ntype profileDateType = {\r\n    _id:string;\r\n    email:string;\r\n    name:string;\r\n    avatar?:string;\r\n    publicCardsPacksCount:number;\r\n\r\n    created:Date;\r\n    updated:Date;\r\n    isAdmin:boolean,\r\n    verified:boolean,\r\n    rememberMe:boolean;\r\n\r\n    error?:string\r\n}\r\n\r\nexport type RecoveryResponseType = {\r\n    info?: string\r\n    error?: string\r\n}\r\n\r\nexport const Api = {\r\n    getPing: () => {\r\n        const promise = instance.get<pingType>(\"ping\")\r\n        return promise\r\n    },\r\n    logIn: (email: string, password: string) => {\r\n        const promise = instance.post<LogInType>(\"auth/login\", {email, password})\r\n        return promise\r\n    },\r\n    register: (email: string, password: string) => {\r\n        const promise = instance.post<RegisterType>(\"auth/register\", {email, password})\r\n        return promise\r\n    },\r\n    recoveryPassword: (email: string | undefined) => {\r\n        const from = `dmytrostorozhenko1994@gmail.com`\r\n        const message =\r\n            `<div>Your password recover link is <a href='http://localhost:3000/#/set-new-password/$token$'>here</a></div>`\r\n        return instance.post<RecoveryResponseType>(\"auth/forgot\", {email, from, message})\r\n    },\r\n    profileDate:() => {\r\n        const promise = instance.post(\"auth/me\")\r\n        return promise\r\n    }\r\n}","import {Dispatch} from 'redux'\r\nimport {Api} from \"../API/API\";\r\n\r\nexport type stateProfileType = {\r\n    name:string,\r\n    avatar:string\r\n}\r\nconst initialStateProfile = {\r\n    name:\"\",\r\n    avatar:\"\"\r\n}\r\n\r\n\r\ntype typeGetProfileData = {\r\n    type:\"GET-PROFILE-DATA\"\r\n    name:string,\r\n    avatar:string | undefined\r\n}\r\ntype actionProfileType  = typeGetProfileData\r\n\r\n\r\nexport const profileReducer = (state:stateProfileType = initialStateProfile ,action:actionProfileType) => {\r\n    switch (action.type){\r\n        case \"GET-PROFILE-DATA\":\r\n            return {...state,name:action.name,avatar:action.avatar}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nconst profileGetDataAC = (name:string,avatar:string | undefined) => {\r\n    return {\r\n        type:\"GET-PROFILE-DATA\",\r\n        name,\r\n        avatar\r\n    }\r\n}\r\n\r\nexport const profileDateThunk = () => {\r\n    return(dispatch:Dispatch) => {\r\n        Api.profileDate()\r\n            .then((res) => {\r\n                dispatch(profileGetDataAC(res.data.name,res.data.avatar))\r\n            }).catch((error) => {\r\n\r\n        })\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport \"./Profile.module.css\"\r\nimport {Api} from \"../../API/API\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {stateProfileType} from \"../../store/profile-reducer\";\r\nimport {profileDateThunk} from \"../../store/profile-reducer\";\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    let profileData = useSelector<AppRootStateType,stateProfileType>(state => state.profileDate)\r\n\r\n   useEffect(() => {\r\n       dispatch(profileDateThunk())\r\n   },[])\r\n\r\n    return <div className=\"Profile\">\r\n        <h1>Profile</h1>\r\n        <div>{profileData.name}</div>\r\n        <div>\r\n            <img src={profileData.avatar} alt={\"hello\"}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React, {ChangeEvent} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {stateTypeForError} from '../../store/loginError-reducer'\r\n\r\ntype propsType = {\r\n    password:string;\r\n    email:string;\r\n    emailChange:(event:ChangeEvent<HTMLInputElement>) => void;\r\n    passwordChange:(event:ChangeEvent<HTMLInputElement>) => void;\r\n    logIn:() => void;\r\n}\r\n\r\n\r\nconst LogInFrom = (props:propsType) => {\r\n\r\n    const error = useSelector<AppRootStateType,stateTypeForError>(state => state.error)\r\n\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: '',\r\n    //         password:''\r\n    //     },\r\n    //     validate: (values) => {\r\n    //         const errors: FormikErrorType = {};\r\n    //         if (!values.email) {\r\n    //             errors.email = 'Required';\r\n    //         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //             errors.email = 'Invalid email address';\r\n    //         }\r\n    //\r\n    //         if(!values.password) {\r\n    //             errors.password = 'Required'\r\n    //         }\r\n    //         else if (values.password.length < 5) {\r\n    //             errors.password = \"password is short\"\r\n    //         }\r\n    //         return errors;\r\n    //     },\r\n    //     onSubmit: values => {\r\n    //         dispatch(LogInThunk(formik.values.email,formik.values.password))\r\n    //     },\r\n    // });\r\n\r\n\r\n    return (\r\n            <div style={{width:\"100%\",height:'200px'}}>\r\n                <div className=\"mb-3\">\r\n                    <input\r\n                        type=\"email\"\r\n                        className={error.emailError ? \"form-control is-invalid\" : \"form-control\"}\r\n                        id=\"exampleInputEmail1\"\r\n                        aria-describedby=\"emailHelp\"\r\n                        placeholder={\"Email\"}\r\n                        value={props.email}\r\n                        onChange={props.emailChange}\r\n                    />\r\n                    {error.emailError && <div style={{color:\"red\"}}>{error.emailError}</div>}\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <input\r\n                        type=\"password\"\r\n                        className={error.passwordError ? \"form-control is-invalid\" : \"form-control\"}\r\n                        id=\"exampleInputPassword1\"\r\n                        placeholder={\"Password\"}\r\n                        value={props.password}\r\n                        onChange={props.passwordChange}\r\n                    />\r\n                    {error.passwordError && <div style={{color:\"red\"}}>{error.passwordError}</div>}\r\n                </div>\r\n                <div className=\"mb-3 form-check\">\r\n                    <NavLink to={\"/PasswordRecovery\"} style={{textDecoration:'none'}}>forgot password</NavLink>\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => {props.logIn()}}\r\n                >Submit</button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default LogInFrom;","export type stateTypeForError = {\r\n    emailError:string,\r\n    passwordError:string\r\n}\r\n\r\ntype actionTypeForErrorEmail = {\r\n    type:\"ERROR-EMAIL\"\r\n    errorMessage:string\r\n}\r\ntype actionTypeForErrorPassword = {\r\n    type:\"ERROR-PASSWORD\"\r\n    errorMessagePassword:string\r\n}\r\ntype actionTypeForError = actionTypeForErrorEmail | actionTypeForErrorPassword\r\n\r\nconst initialState:stateTypeForError = {\r\n    emailError:\"\",\r\n    passwordError:\"\"\r\n}\r\n\r\nexport const loginErrorReducer = (state:stateTypeForError = initialState,action:actionTypeForError) => {\r\n    switch (action.type){\r\n        case \"ERROR-EMAIL\":\r\n            return {...state,emailError: action.errorMessage}\r\n        case \"ERROR-PASSWORD\":\r\n            return {...state,passwordError:action.errorMessagePassword}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const errorLoginEmailAC = (errorMessage:string) => {\r\n    return {\r\n        type:\"ERROR-EMAIL\",\r\n        errorMessage\r\n    }\r\n}\r\nexport const errorLoginPasswordAC = (errorMessagePassword:string) => {\r\n    return {\r\n        type:\"ERROR-PASSWORD\",\r\n        errorMessagePassword\r\n    }\r\n}","import {Dispatch} from 'redux'\r\nimport {Api} from \"../API/API\";\r\n\r\ntype verifiedType = \"true\" | \"false\" | \"none\"\r\n\r\ntype actionLogINType = {\r\n    type:\"LOGIN\"\r\n    email:string\r\n    password:string\r\n    verified:verifiedType\r\n}\r\ntype resetVerifiedType = {\r\n    type:\"RESET\"\r\n}\r\nexport type stateType = {\r\n    email:string,\r\n    password:string,\r\n    verified:verifiedType\r\n}\r\n\r\ntype actionLoginType = actionLogINType | resetVerifiedType\r\n\r\nexport const logInReducer = (state:stateType = {email:\"\",password:\"\",verified:\"none\"},action:actionLoginType) => {\r\n    switch (action.type){\r\n        case \"LOGIN\":\r\n            return {email:action.email,password:action.password,verified:action.verified}\r\n        case \"RESET\":\r\n            return {...state,verified:\"none\"}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const LogInAC = (email:string,password:string,verified:verifiedType) => {\r\n    return {\r\n        type:\"LOGIN\",\r\n        email,\r\n        password,\r\n        verified\r\n    }\r\n}\r\nexport const ResetAC = () => {\r\n    return {\r\n        type:\"RESET\"\r\n    }\r\n}\r\n\r\n\r\nexport const LogInThunk = (email:string,password:string) => {\r\n    return (dispatch:Dispatch) => {\r\n        Api.logIn(email,password)\r\n            .then((res) => {\r\n                debugger\r\n                console.log(res.data)\r\n                dispatch(LogInAC(email,password,\"true\"))\r\n            }).catch((error) => {\r\n                dispatch(LogInAC(email,password,\"false\"))\r\n        })\r\n    }\r\n\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport './log_in.module.css'\r\nimport classes from './log_in.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport LogInFrom from \"./loginForm\";\r\nimport {Redirect} from 'react-router-dom'\r\nimport {AppRootStateType, store} from \"../../store/store\";\r\nimport {routes} from \"../navbar/Navbar\";\r\nimport {stateType} from \"../../store/log_in-reducer\";\r\nimport {errorLoginEmailAC,errorLoginPasswordAC} from '../../store/loginError-reducer'\r\nimport {LogInThunk} from '../../store/log_in-reducer'\r\n\r\n\r\n\r\nconst LogIn = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const loginDate = useSelector<AppRootStateType,stateType>(state => state.logIn)\r\n    console.log(loginDate.email)\r\n    console.log(loginDate.verified)\r\n\r\n    let [email,setEmail] = useState<string>(\"\")\r\n    let [password,setPassword] = useState<string>(\"\")\r\n\r\n    // Functions\r\n    const logIn = () => {\r\n\r\n        if(!email && !password){\r\n            dispatch(errorLoginEmailAC(\"enter email,please\"))\r\n            dispatch(errorLoginPasswordAC(\"enter password,please\"))\r\n        }else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n            dispatch(errorLoginEmailAC(\"email is not valid\"))\r\n        }else if (!password){\r\n            dispatch(errorLoginPasswordAC(\"enter password\"))\r\n        }else if (password.length<5){\r\n            errorLoginPasswordAC(\" \")\r\n        }else {\r\n            dispatch(LogInThunk(email,password))\r\n        }\r\n\r\n    }\r\n    const emailChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(event.currentTarget.value)\r\n    }\r\n    const passwordChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value)\r\n    }\r\n\r\n\r\n    // Redirects\r\n    if(loginDate.verified === \"true\"){\r\n        return <Redirect to={routes.forProfile}/>\r\n    }\r\n    if(loginDate.verified === \"false\"){\r\n        return  <Redirect to={routes.forRegister}/>\r\n    }\r\n\r\n\r\n    return <div className={classes.Login}>\r\n        <h1 className={classes.H1} >Login</h1>\r\n        <LogInFrom\r\n            password={password}\r\n            email={email}\r\n            emailChange={emailChange}\r\n            passwordChange={passwordChange}\r\n            logIn={logIn}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default LogIn;","import {Dispatch} from 'redux'\r\nimport {Api} from \"../API/API\";\r\n\r\ntype actionType = ReturnType<typeof RegisterAC>\r\n                | ReturnType<typeof ErrorAC>\r\n\r\ntype initialStateType = typeof initialState\r\n\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    setError: ''\r\n}\r\n\r\n\r\nexport const registerReducer = (state: initialStateType = initialState,action:actionType) => {\r\n    switch (action.type){\r\n        case \"REGISTER\":\r\n            return   {...state,\r\n                isRegistered: action.isRegistered\r\n            }\r\n        case \"ERROR\":\r\n            return   {...state,\r\n                setError: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const RegisterAC = (isRegistered: boolean) => ({\r\n    type:\"REGISTER\",\r\n    isRegistered\r\n} as const)\r\nexport const ErrorAC = (error: string) => ({\r\n    type:\"ERROR\",\r\n    error\r\n} as const)\r\n\r\n\r\nexport const RegisterTC = (email:string,password:string) => (dispatch:Dispatch) => {\r\n    Api.register(email,password)\r\n        .then((res) => {\r\n            dispatch(RegisterAC(true))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(ErrorAC(error.error))\r\n        })\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport style from './register.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\ntype registerFormType = {\r\n    email: string\r\n    password: string\r\n    confirmPassword: string\r\n    setEmail: (value: string) => void\r\n    setPassword: (value: string) => void\r\n    setConfirmPassword: (value: string) => void\r\n    signUp: () => void\r\n}\r\n\r\n\r\nconst RegisterForm = (props: registerFormType) => {\r\n\r\n    const error = useSelector<AppRootStateType, string>(state => state.register.setError)\r\n\r\n\r\n    const onChangeLoginHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setEmail(e.currentTarget.value)\r\n    }\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setPassword(e.currentTarget.value)\r\n    }\r\n    const onChangeConfirmPasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setConfirmPassword(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className={style.Register}>\r\n            <div >\r\n                <input type=\"email\"\r\n                       className={`form-control ${error && 'is-invalid'}`}\r\n                       id=\"floatingInput\"\r\n                       placeholder=\"Login\"\r\n                       value={props.email}\r\n                       onChange={onChangeLoginHandler}/>\r\n            </div>\r\n\r\n            <div className={style.Password}>\r\n                <input type=\"password\"\r\n                       className={`form-control ${error && 'is-invalid'}`}\r\n                       id=\"floatingPassword\"\r\n                       placeholder=\"Password\"\r\n                       value={props.password}\r\n                       onChange={onChangePasswordHandler}/>\r\n            </div>\r\n\r\n            <div>\r\n                <input type=\"password\"\r\n                       className={`form-control ${error && 'is-invalid'}`}\r\n                       id=\"floatingPassword\"\r\n                       placeholder=\"Confirm password\"\r\n                       value={props.confirmPassword}\r\n                       onChange={onChangeConfirmPasswordHandler}/>\r\n            </div>\r\n            {error}\r\n\r\n            <div className={style.Button}>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => props.signUp()}>Sign up</button>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default RegisterForm","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ErrorAC, RegisterTC} from \"../../store/register-reducer\";\r\nimport RegisterForm from \"./registerForm\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {routes} from \"../navbar/Navbar\";\r\n\r\n\r\n\r\nconst Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegisteredUser = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const error = useSelector<AppRootStateType, string>(state => state.register.setError)\r\n    let [email, setEmail] = useState('')\r\n    let [password, setPassword] = useState('')\r\n    let [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n\r\n    const signUp = () => {\r\n\r\n        if (!email) {\r\n            dispatch(ErrorAC('Email address is required'))\r\n        } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n            dispatch(ErrorAC('Please, enter correct email'))\r\n        } else if (password != confirmPassword) {\r\n            dispatch(ErrorAC('Password confirmation does not match'))\r\n        } else if (password.length < 6) {\r\n            dispatch(ErrorAC('Password must be 6 or more characters'))\r\n            return error\r\n        } else\r\n            dispatch(RegisterTC(email, password))\r\n\r\n            }\r\n\r\n    const setEmailChange = (value: string) => {\r\n        setEmail(value)\r\n    }\r\n    const setPasswordChange = (value: string) => {\r\n        setPassword(value)\r\n    }\r\n    const setConfirmPasswordChange = (value: string) => {\r\n        setConfirmPassword(value)\r\n    }\r\n\r\n\r\n    return <>\r\n        {isRegisteredUser &&\r\n        < Redirect to={routes.forLogin}/>}\r\n        <div className=\"Register\">\r\n            <h1>Register</h1>\r\n            <RegisterForm\r\n                email={email}\r\n                password={password}\r\n                confirmPassword={confirmPassword}\r\n                setConfirmPassword={setConfirmPasswordChange}\r\n                setEmail={setEmailChange}\r\n                setPassword={setPasswordChange}\r\n                signUp={signUp}\r\n            />\r\n\r\n        </div>\r\n\r\n    </>\r\n\r\n}\r\nexport default Register\r\n","import React from \"react\";\r\nimport \"./new_password.module.css\"\r\n\r\nconst NewPassword = () => {\r\n    return <div className=\"NewPassword\">\r\n\r\n    </div>\r\n}\r\n\r\nexport default NewPassword;","import React from \"react\";\r\nimport \"./404.module.css\"\r\n\r\n\r\n\r\nconst Four = () => {\r\n\r\n\r\n    return <div className=\"Four\">\r\n        <div style={{color:\"red\",fontSize:'60px'}}>404</div>\r\n    </div>\r\n}\r\n\r\nexport default Four;","export function validate(values: Validate) {\r\n    let errors: Validate = {};\r\n    if (!values.email) errors.email = 'Email address is required'\r\n    else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) errors.email = 'Email address is invalid'\r\n    if (!values.password) errors.password = 'Password is required'\r\n    else if (values.password.length < 6) errors.password = 'Password must be 6 or more characters'\r\n    return errors;\r\n}\r\n\r\nexport function emailValidate(values: Validate) {\r\n    let errors: Validate = {};\r\n    if (!values.email) errors.email = 'Email address is required'\r\n    else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) errors.email = 'Email address is invalid'\r\n    return errors;\r\n}\r\n\r\n// types\r\nexport type Validate = {\r\n    email?: string | undefined\r\n    password?: string | undefined\r\n}","import React, {useState} from \"react\";\r\nimport styles from \"./password_recovery.module.css\"\r\nimport {Api} from \"../../API/API\";\r\nimport {emailValidate} from \"../../common/helpers/validations_rules\";\r\nimport {useForm} from \"../../common/customHooks/useForm\";\r\n\r\nexport const PasswordRecovery = () => {\r\n    let [responseMessage, setResponseMessage] = useState<string | undefined>('')\r\n    let [isDisable, setIsDisable] = useState<boolean>(false)\r\n\r\n    const submitCallback = async () => {\r\n        setIsDisable(true)\r\n        try {\r\n            let response = await Api.recoveryPassword(values.email)\r\n            setResponseMessage(response.data.info)\r\n            values.email = ''\r\n        } catch (error) {\r\n            errors.email = error.response.data.error\r\n        } finally {\r\n            setIsDisable(false)\r\n        }\r\n    }\r\n\r\n    const {\r\n        values,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n    } = useForm(submitCallback, emailValidate)\r\n\r\n\r\n    return <>\r\n        <div className={styles.password_recovery}>\r\n            <p>Enter your email address<br/>to recover your password</p>\r\n            <div>\r\n                <form onSubmit={handleSubmit} noValidate>\r\n                    <div className='mb-3'>\r\n                        <input\r\n                            type='email'\r\n                            name='email'\r\n                            value={values.email || ''}\r\n                            className={`form-control ${errors.email && 'is-invalid'}`}\r\n                            placeholder='Email'\r\n                            aria-describedby='emailHelp'\r\n                            onChange={handleChange}\r\n                            disabled={isDisable}\r\n                            autoComplete='off'\r\n                        />\r\n                        {errors.email && <div className='invalid-feedback'>{errors.email}</div>}\r\n                        {responseMessage && <div className={styles.responseMessage}>{responseMessage}</div>}\r\n                        {isDisable && <div className={`spinner-border ${styles.spinner}`} role=\"status\">\r\n                            <span className=\"visually-hidden\">Loading...</span>\r\n                        </div>}\r\n                    </div>\r\n                    <button\r\n                        className='btn btn-primary'\r\n                        type='submit'\r\n                    >Send\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </>\r\n}","import {useState, useEffect, ChangeEvent, FormEvent} from 'react';\r\nimport {Validate} from \"../helpers/validations_rules\";\r\n\r\nexport const useForm = (\r\n    callback: () => Promise<void>,\r\n    validate: (values: Validate) => Validate) => {\r\n\r\n    const [values, setValues] = useState<Validate>({});\r\n    const [errors, setErrors] = useState<Validate>({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(errors).length === 0 && isSubmitting) {\r\n            callback();\r\n        }\r\n    }, [errors]);\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        if (event) event.preventDefault();\r\n        setErrors(validate(values));\r\n        setIsSubmitting(true);\r\n    };\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        event.persist();\r\n        setValues(values => ({...values, [event.target.name]: event.target.value}));\r\n    };\r\n\r\n    return {\r\n        handleChange,\r\n        handleSubmit,\r\n        values,\r\n        errors,\r\n    }\r\n};","import {instance} from \"./instance\";\r\n\r\nexport const packsAPI = {\r\n    getPacks: (params: GetPacksRequestType)=> {\r\n        return instance.get<GetPacksResponseType>('cards/pack', {params})\r\n    }\r\n}\r\n\r\n// types\r\ntype GetPacksRequestType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\n\r\nexport type GetPacksResponseType = {\r\n    cardPacks: Array<GetPackType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token?: string\r\n    tokenDeathTime?: number\r\n}\r\n\r\nexport type GetPackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name?: string\r\n    private: boolean\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    cardsCount: number\r\n    type: \"pack\" | \"folder\"\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id?: string\r\n    __v: number\r\n}\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {packsAPI,GetPackType} from \"../../API/packsAPI\";\r\n\r\nconst Table = () => {\r\n\r\n    const [massFromServer,setMassFromServer] = useState<Array<GetPackType>>([])\r\n\r\n    useEffect(() => {\r\n        packsAPI.getPacks({})\r\n            .then((res) => {\r\n                console.log(res.data)\r\n                setMassFromServer(res.data.cardPacks)\r\n            })\r\n    },[])\r\n\r\n    const massResult = massFromServer.map((i) => {\r\n        return(\r\n            <tr >\r\n                <th>{i.cardsCount}</th>\r\n                <td>{i.name}</td>\r\n                <td>{i.user_name}</td>\r\n                <td>{i.rating}</td>\r\n                <th><button style={{width:\"20px\",height:\"20px\"}}/></th>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return <table className=\"table\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">First</th>\r\n                <th scope=\"col\">Last</th>\r\n                <th scope=\"col\">Handle</th>\r\n                <th scope=\"col\">Buttons</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {massResult}\r\n            </tbody>\r\n        </table>\r\n\r\n\r\n}\r\n\r\nexport default Table\r\n\r\n{/*<tr>*/}\r\n{/*    <th scope=\"row\">1</th>*/}\r\n{/*    <td>Mark</td>*/}\r\n{/*    <td>Otto</td>*/}\r\n{/*    <td>@mdo</td>*/}\r\n{/*</tr>*/}\r\n{/*<tr>*/}\r\n{/*    <th scope=\"row\">2</th>*/}\r\n{/*    <td>Jacob</td>*/}\r\n{/*    <td>Thornton</td>*/}\r\n{/*    <td>@fat</td>*/}\r\n{/*</tr>*/}\r\n{/*<tr>*/}\r\n{/*    <th scope=\"row\">3</th>*/}\r\n{/*    <td>Larry the Bird</td>*/}\r\n{/*    <td>@twitter</td>*/}\r\n{/*</tr>*/}","import React from \"react\";\r\nimport './App.css';\r\nimport Navbar from './components/navbar/Navbar'\r\nimport {BrowserRouter,Route} from \"react-router-dom\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport LogIn from \"./components/LogIn/log_in\";\r\nimport Register from \"./components/register/register\";\r\nimport NewPassword from \"./components/new_password/new_password\";\r\nimport Four from \"./components/404/404\";\r\nimport {PasswordRecovery} from \"./components/password-recovery/password_recovery\";\r\nimport Table from \"./components/table/table\";\r\nimport {routes} from \"./components/navbar/Navbar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n        <div className=\"App\">\r\n            <Navbar/>\r\n            <div className=\"RenderPlace\">\r\n                <Route path={routes.forProfile} component={Profile}/>\r\n                <Route path={routes.forLogin} component={LogIn}/>\r\n                <Route path={routes.forRegister} component={Register}/>\r\n                <Route path={routes.foNewPassword} component={NewPassword}/>\r\n                <Route path={routes.forPasswordRecovery} component={PasswordRecovery}/>\r\n                <Route path={routes.forMistake} component={Four}/>\r\n                <div className=\"TableRender\">\r\n                    <Route path={routes.forTable} component={Table}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, applyMiddleware,createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {userReducer} from \"./user-reducer\";\r\nimport {logInReducer} from \"./log_in-reducer\";\r\nimport {registerReducer} from \"./register-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {loginErrorReducer} from './loginError-reducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    user:userReducer,\r\n    logIn:logInReducer,\r\n    register: registerReducer,\r\n    profileDate:profileReducer,\r\n    error:loginErrorReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","type actionType = {\r\n    type:\"Add\"\r\n}\r\n\r\n\r\nexport const userReducer = (state:string = 'Nikita',action:actionType) => {\r\n    switch (action.type){\r\n        case \"Add\":\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}